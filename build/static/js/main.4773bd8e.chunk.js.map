{"version":3,"sources":["BooksAPI.js","components/Book.js","components/serch.js","components/Shelf.js","components/Home.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","then","res","json","data","books","update","book","shelf","id","method","body","JSON","stringify","Book","props","className","style","width","height","backgroundImage","img","onChange","e","target","value","disabled","title","authors","Search","useState","query","setQuery","bookResult","setBookResult","active","setActive","useEffect","maxResults","Books","error","map","booksSearch","forEach","imageLinks","thumbnail","to","type","placeholder","x","Shelf","bShelf","filter","category","name","Home","App","setBooks","updateState","a","path","exact","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4773bd8e.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\n\nlet token = localStorage.token;\n\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\n\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token,\n};\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ shelf }),\n  }).then((res) => res.json());\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ query, maxResults }),\n  })\n    .then((res) => res.json())\n    .then((data) => data.books);\n","import React from \"react\";\r\n\r\n/**\r\n * @description have all details of the books that comes from the books api\r\n * @constructor Book\r\n * @param props to receive the data from the parent\r\n * @returns  Books\r\n */\r\n\r\nfunction Book(props) {\r\n  return (\r\n    <div className=\"book\">\r\n      <div className=\"book-top\">\r\n        <div\r\n          className=\"book-cover\"\r\n          style={{\r\n            width: 128,\r\n            height: 193,\r\n            backgroundImage: `url(${props.img})`,\r\n          }}\r\n        ></div>\r\n        <div className=\"book-shelf-changer\">\r\n          <select\r\n            onChange={(e) => {\r\n              props.update(props, e.target.value);\r\n            }}\r\n            value={props.shelf ? props.shelf : \"none\"}\r\n          >\r\n            <option value=\"move\" disabled>\r\n              Move to...\r\n            </option>\r\n            <option value=\"currentlyReading\">Currently Reading</option>\r\n            <option value=\"wantToRead\">Want to Read</option>\r\n            <option value=\"read\">Read</option>\r\n            <option value=\"none\">None</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div className=\"book-title\">{props.title}</div>\r\n      <div className=\"book-authors\">{props.authors}</div>\r\n      <div className=\"book-authors\">{props.shelf ? props.shelf : \"none\"}</div>\r\n    </div>\r\n  );\r\n}\r\nexport default Book;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as Books from \"../BooksAPI\";\r\nimport Book from \"./Book\";\r\n\r\n/**\r\n * @description when the client search books show and if query is not exist show error\r\n * @constructor Search\r\n * @param props to receive the data from the parent\r\n * @returns books from search api\r\n */\r\n\r\nfunction Search(props) {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [bookResult, setBookResult] = useState([]);\r\n  const [active, setActive] = useState(true);\r\n\r\n  /**\r\n   * @description when the client search books show and if query is not exist show error\r\n   * @param {string} query string come from search bar\r\n   * @returns if we have search value get data from api if not return error and if books id in the search page\r\n   * equal thats in home page set or change the shelf\r\n   */\r\n\r\n  useEffect(() => {\r\n    if (query) {\r\n      Books.search(query).then((data) => {\r\n        if (data.error) {\r\n          setActive(false);\r\n        } else {\r\n          setBookResult(\r\n            data.map((booksSearch) => {\r\n              props.books.forEach((book) => {\r\n                if (booksSearch.id === book.id) {\r\n                  booksSearch.shelf = book.shelf;\r\n                }\r\n              });\r\n              if (!booksSearch.imageLinks) {\r\n                booksSearch.imageLinks = \"thumbnail\";\r\n              } else if (!booksSearch.imageLinks.thumbnail) {\r\n                booksSearch.imageLinks.thumbnail =\r\n                  \"https://react.semantic-ui.com/images/wireframe/image.png\";\r\n              }\r\n              // booksSearch.imageLinks.thumbnail\r\n              //   ? booksSearch.imageLinks.thumbnail\r\n              //   : booksSearch.imageLinks.thumbnail ===\r\n              //     \"https://react.semantic-ui.com/images/wireframe/image.png\";\r\n              return booksSearch;\r\n            })\r\n          );\r\n          setActive(true);\r\n        }\r\n      });\r\n    } else {\r\n      setActive(false);\r\n    }\r\n  }, [props.books, query]);\r\n\r\n  return (\r\n    <div className=\"search-books\">\r\n      <div className=\"search-books-bar\">\r\n        <Link to=\"/\" className=\"close-search\">\r\n          Close\r\n        </Link>\r\n        <div className=\"search-books-input-wrapper\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search by title, author, or ISBN\"\r\n            onChange={(e) => setQuery(e.target.value)}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"search-books-results\">\r\n        <ol className=\"books-grid\">\r\n          {active ? (\r\n            bookResult.map((x) => {\r\n              return (\r\n                <li key={x.id}>\r\n                  <Book\r\n                    title={x.title}\r\n                    id={x.id}\r\n                    img={\r\n                      x.imageLinks.thumbnail ? x.imageLinks.thumbnail : \"http\"\r\n                    }\r\n                    authors={x.authors}\r\n                    update={props.update}\r\n                    shelf={x.shelf}\r\n                    books={props.books}\r\n                  />\r\n                </li>\r\n              );\r\n            })\r\n          ) : (\r\n            <div className=\"empty\"> \"Empty Query\" </div>\r\n          )}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Search;\r\n","import React from \"react\";\r\nimport Book from \"./Book\";\r\n\r\n/**\r\n * @description have the book components\r\n * @param props to receive the data from the parent\r\n * @returns  Book components\r\n */\r\n\r\nfunction Shelf(props) {\r\n  //  Filter the books by the category\r\n  const bShelf = props.books.filter((x) => x.shelf === props.category);\r\n\r\n  return (\r\n    <div className=\"bookshelf\" key={props.id}>\r\n      <h2 className=\"bookshelf-title\">{props.name}</h2>\r\n      <div className=\"bookshelf-books\">\r\n        <ol className=\"books-grid\">\r\n          {/* map to show the books */}\r\n          {bShelf.map((x) => {\r\n            return (\r\n              <li key={x.id}>\r\n                <Book\r\n                  title={x.title}\r\n                  img={x.imageLinks.thumbnail}\r\n                  authors={x.authors}\r\n                  id={x.id}\r\n                  update={props.update}\r\n                  shelf={x.shelf}\r\n                  books={props.books}\r\n                />\r\n              </li>\r\n            );\r\n          })}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Shelf;\r\n","import React from \"react\";\r\nimport Shelf from \"./Shelf\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n/**\r\n * @description Have all components in home page\r\n * @constructor Home\r\n * @param props to receive the data from the parent\r\n * @returns Shelf components and send data to it from props\r\n */\r\n\r\nfunction Home(props) {\r\n  return (\r\n    <div className=\"list-books\">\r\n      <div className=\"list-books-title\">\r\n        <h1>MyReads</h1>\r\n      </div>\r\n      <div className=\"list-books-content\">\r\n        <Shelf\r\n          name=\"Currently Reading\"\r\n          books={props.books}\r\n          id=\"1\"\r\n          category=\"currentlyReading\"\r\n          update={props.update}\r\n        />\r\n        <Shelf\r\n          name=\"Want to Read\"\r\n          books={props.books}\r\n          id=\"2\"\r\n          category=\"wantToRead\"\r\n          update={props.update}\r\n        />\r\n        <Shelf\r\n          name=\"Read\"\r\n          books={props.books}\r\n          id=\"3\"\r\n          category=\"read\"\r\n          update={props.update}\r\n        />\r\n      </div>\r\n      <div className=\"open-search\">\r\n        <Link to=\"/search\">Add a book</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Home;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Search from \"./components/serch\";\nimport Home from \"./components/Home\";\nimport { Route, Routes } from \"react-router-dom\";\nimport * as Books from \"./BooksAPI\";\n\n/**\n * @description Collect all components of the application and,  using the route in it\n * @constructor App\n */\n\nfunction App() {\n  const [books, setBooks] = useState([]);\n\n  /**\n   * @description used to update the shelf of the books\n   * @param {string} book - The book to get the id of books\n   * @param {string} shelf - The shelf of the books\n   * @returns change the option of books\n   */\n\n  const updateState = async (book, shelf) => {\n    await Books.update(book, shelf);\n    await Books.getAll().then((data) => setBooks(data));\n  };\n\n  useEffect(() => {\n    // get all avilable books from api\n    Books.getAll().then((data) => setBooks(data));\n  }, []);\n\n  return (\n    // Routs to change the pages\n    <div className=\"app\">\n      <Routes>\n        <Route\n          key={1}\n          path=\"/\"\n          exact\n          element={<Home books={books} update={updateState} />}\n        />\n        <Route\n          key={2}\n          path=\"search\"\n          element={<Search books={books} update={updateState} />}\n        />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}